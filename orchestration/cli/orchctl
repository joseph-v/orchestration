#!/usr/bin/env python
# Copyright 2019 The OpenSDS Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This class contains the constants required by different modules

import argparse
from argparse import RawTextHelpFormatter
from service import add_services, list_services, get_services
from instance import list_instances, get_instances, delete_instances, run_instance
from task import get_task, get_workflows
from utils import update_config_vars, get_info
import utils

def service_api(args):
    switcher = {
        "add": add_services,
        "list": list_services,
        "get": get_services,
    }
    # Get the function from switcher dictionary
    func = switcher.get(args.operation, None)
    if func is None:
        raise Exception('Invalid operation: ' + args.operation)
    ret = func(args)
    if ret is not None:
        print(ret)


def instance_api(args):
    switcher = {
        "run": run_instance,
        "list": list_instances,
        "get": get_instances,
        "delete": delete_instances,
    }

    func = switcher.get(args.operation, None)
    if func is None:
        raise Exception('Invalid operation: ' + args.operation)

    ret = func(args)
    if ret is not None:
        print(ret)


def workflow_api(args):
    switcher = {
        "get": get_workflows,
    }
    func = switcher.get(args.operation, None)
    if func is None:
        raise Exception('Invalid operation: ' + args.operation)
    ret = func()
    if ret is not None:
        print(ret)


def task_api(args):
    switcher = {
        "get": get_task
    }

    func = switcher.get(args.operation, None)
    if func is None:
        raise Exception('Invalid operation: ' + args.operation)
    ret = func()
    if ret is not None:
        print(ret)


def cli():
    description = """
    CLI for OpenSDS Orchestration Manager

    Example:
    ./orchctl --help
    ./orchctl service list
    ./orchctl service add --data '{ ... }'
    ./orchctl service get --id d8360a8a-6c5e-4533-a18a-b446db8caac8
    ./orchctl instance list
    ./orchctl instance get --id 2723347b-9af8-451a-a7f8-62d40b10ad6f
    ./orchctl instance delete --id 2723347b-9af8-451a-a7f8-62d40b10ad6f
    ./orchctl instance run --data '{ ... }'
    """
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=RawTextHelpFormatter
    )

    # Main options
    parser.add_argument('-a','--address', help='ip address of opensds hotpot')
    parser.add_argument('-u','--user', help='username for opensds hotpot')
    parser.add_argument('-p','--password', help='password for opensds hotpot')
    parser.add_argument(
        '-t','--project_id', help='project_id for opensds hotpot')
    parser.add_argument('--orch_ip', help='Orchestration server ip address')
    parser.add_argument('--orch_port', help='Orchestration server port')

    subparsers = parser.add_subparsers()

    # Subcommand - service
    parser_service = subparsers.add_parser(
        'service', help='Registers/Shows services in Orchestrator')
    parser_service.add_argument(
        'operation', choices=['list', 'get', 'add'],
        help='list: Shows all services, ' +
            'get: Show specified service with "id" specified, ' +
            'add: Registers services with input "data"')
    parser_service.add_argument(
        '-i', '--id', help='Service ID for get subcommand')
    parser_service.add_argument(
        '-d','--data', help='JSON data of Serive for add subcommand')
    parser_service.set_defaults(func=service_api)

    # Subcommand - instance
    parser_instance = subparsers.add_parser(
        'instance', help='Executes/Shows/Deletes workflow instances')
    parser_instance.add_argument(
        'operation', choices=['list', 'get', 'delete', 'run'],
        help='list: Shows all instances, ' +
            'get: Show specified instance with "id" specified, ' +
            'delete: Remove specified instance with "id" specified, ' +
            'run: Execute instance with input "data"')
    parser_instance.add_argument(
        '-i', '--id', help='Instance ID for get/delete subcommand')
    parser_instance.add_argument(
        '-d', '--data', help='JSON data of Instance for run subcommand')
    parser_instance.set_defaults(func=instance_api)

    # Subcommand - workflow
    parser_workflow = subparsers.add_parser(
        'workflow', help='Shows workflow definitions in Orchestrator')
    parser_workflow.add_argument(
        'operation', choices=['get'],
        help='get: Show specified workflow definition')
    parser_workflow.set_defaults(func=workflow_api)

    # Subcommand - task
    parser_task = subparsers.add_parser(
        'task', help='Status of the task in Orchestrator')
    parser_task.add_argument(
        'operation', choices=['get'],
        help='Show status of the task')
    parser_task.add_argument('--id', help='Execution ID of the task')
    parser_task.set_defaults(func=task_api)

    args = parser.parse_args()

    update_config_vars(args)
    args.func(args)


if __name__ == '__main__':
    cli()
